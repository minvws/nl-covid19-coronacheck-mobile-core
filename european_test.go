package mobilecore

import (
	"testing"
	"time"
)

func TestExampleQRs(t *testing.T) {
	now := time.Unix(1627462000, 0)

	for i, testcase := range qrTestcases {
		r1 := ReadEuropeanCredential(testcase.qr)
		couldRead := r1.Error == ""
		if couldRead != testcase.expectedReadability {
			t.Fatal("Expected readability", testcase.expectedReadability, "of testcase", i, r1.Error)
		}

		r2 := IsDCC(testcase.qr)
		if r2 != testcase.expectedReadability {
			t.Fatal("Expected IsDCC", testcase.expectedReadability, "of testcase", i)
		}

		// TODO: Properly fix implementation and testcases for missing prefix and for islands-issued DCCs
		r3 := IsForeignDCC(testcase.qr)
		if testcase.expectedStatus == VERIFICATION_SUCCESS && testcase.qr[0] == 'H' && testcase.expectedCountryCode != "CW" {
			if testcase.expectedCountryCode == "NL" {
				if r3 {
					t.Fatal("Expected isForeignDCC false (NL) for testcase", i)
				}
			} else if !r3 {
				t.Fatal("Expected isForeignDCC true for testcase", i)
			}
		} else if r3 {
			t.Fatal("Expected IsForeignDCC false (unreadable) for testcase", i)
		}

		r4 := InitializeVerifier("./testdata")
		if r4.Error != "" {
			t.Fatal("Could not initialize verifier", r4.Error)
		}

		r5 := verify(testcase.qr, VERIFICATION_POLICY_3G, now)
		didVerifyError := r5.Error != ""
		expectError := testcase.expectedStatus == VERIFICATION_FAILED_ERROR
		if didVerifyError != expectError {
			t.Fatal("Presence of verification error is", didVerifyError, "while expecting", expectError, r5.Error)
		}

		if r5.Status != testcase.expectedStatus {
			t.Fatal("Expected status", testcase.expectedStatus, "of testcase", i, "but got", r5.Status)
		}

		if testcase.expectedStatus != VERIFICATION_SUCCESS {
			continue
		}

		testcase.expectedDetails.IssuerCountryCode = testcase.expectedCountryCode
		if *r5.Details != *testcase.expectedDetails {
			t.Fatal("Unexpected details for testcase", i)
		}
	}
}

func TestParseBirthDay(t *testing.T) {
	cases := [][]string{
		{"1980-01-12", "valid", "1980", "01", "12"},
		{"2006-06-24", "valid", "2006", "06", "24"},
		{"2020-12-05", "valid", "2020", "12", "05"},
		{"1980-01", "valid", "1980", "01", ""},
		{"1980", "valid", "1980", "", ""},
		{"", "valid", "", "", ""},

		{"1980-1-12", "invalid"},
		{"1980-1--12", "invalid"},
		{"1980-1-12", "invalid"},
		{"1980-a1-12", "invalid"},

		// We don't actually check if the date exists
		{"1980-13-12", "valid", "1980", "13", "12"},
		{"1980-02-31", "valid", "1980", "02", "31"},
		{"1980-06-41", "valid", "1980", "06", "41"},
		{"1980-31", "valid", "1980", "31", ""},
	}

	for i, c := range cases {
		y, m, d, err := parseDateOfBirth(c[0])
		if c[1] == "valid" {
			if err != nil {
				t.Fatal("Error on valid case", i)
			}

			if y != c[2] || m != c[3] || d != c[4] {
				t.Fatal("Invalid value on case", i)
			}
		} else {
			if err == nil {
				t.Fatal("No error on invalid case", i)
			}
		}
	}
}

type qrTestcase struct {
	qr                  []byte
	expectedStatus      int
	expectedDetails     *VerificationDetails
	expectedReadability bool
	expectedCountryCode string
}

var defaultQR = []byte(`HC1:NCFA20690T9WTWGVLK-49NJ3B0J$OCC*AX*4FBBD%1*702T9DN03E53F3560+$GY50.FK8ZKO/EZKEZ967L6C56GVC*JC1A6C%63W5Y96.96TPCBEC7ZKW.C%DDDZC.H8B%E5$CLPCG/D%DD*X8AH8MZAGY8 JC0/DAC81/DMPCG/DFUCL+9VY87:EDOL9WEQDD+Q6TW6FA7C466KCN9E%961A6DL6FA7D46.JCP9EJY8L/5M/5546.96VF6.JCBECB1A-:8$966469L6OF6VX6FVCPD0KQEPD0LVC6JD846Y96D464W5B56UPCBJCOT9+EDL8FHZ95/D QEALEN44:+C%69AECAWE:34: CJ.CZKE9440/D+34S9E5LEWJC0FD3%4AIA%G7ZM81G72A6J+9RG7SNAH7B5OAU1B2X6LH86T9N096*6G%6AF60Z9P48Q1RI.3/LC8LNQ5RK/4N$4E0W WMH/3OQC2:B0WV4JQS0DH-D$23UJNUL6U*9GDIFL06+61DHX85TD34009K5DIURQAK6RT5B000FGWI%3L*E`)
var nlQR = []byte(`HC1:NCFA20690T9WTWGVLK-49NJ3B0J$OCC*AX*4FBBD%1*70J+9DN03E53F3560.PQY50.FK8ZKO/EZKEZ967L6C56GVC*JC1A6C%63W5Y96.96TPCBEC7ZKW.C%DDDZC.H8B%E5$CLPCG/D%DD*X8AH8MZAGY8 JC0/DAC81/DMPCG/DFUCL+9VY87:EDOL9WEQDD+Q6TW6FA7C466KCN9E%961A6DL6FA7D46.JCP9EJY8L/5M/5546.96VF6.JCBECB1A-:8$966469L6OF6VX6FVCPD0KQEPD0LVC6JD846Y96D464W5B56UPCBJCOT9+EDL8FHZ95/D QEALEN44:+C%69AECAWE:34: CJ.CZKE9440/D+34S9E5LEWJC0FD3%4AIA%G7ZM81G72A6J+9RG7SNAH7B5OAU1B2X6LH86T9N096*6G%6AF60Z9498-.ETWJB/ON3B+XAK7DF%HPZE9$BYKQUOF4:F25NZD0P6E+-0D%C4-3ISRA:PLO0PN6FN9HN0UUB7BBC%MB EXP8HE821WV%K000FGW6%II9F`)
var cuwSubjectAltNameQR = []byte(`HC1:NCF120F90T9WTWGVLK679LDU%KDP:M$-FX*4FBB4W0*70J+9DN03E53F35%63/FY50.FK8ZKO/EZKEZ967L6C56GVC*JC1A6C%63W5Y96.96TPCBEC7ZKW.CZ-C/ C/PDXKEW.C8WEHS8FN9GY8 JC0/DAC81/DMPCG/DFUCL+9VY87:EDOL9WEQDD+Q6TW6FA7C466KCK9E2H9G:6V6BEM6Q$D.UDRYA 96NF6L/5SW6VX6B$D% D3IA4W5646646-96:96XJC +D3KC-SCXJCCWENF6OF63W59%6.96WJCT3EJ+9%JC+QENQ4ZED+EDKWE3EFX3ET34X C:VDG7D82BUVDGECDZCCECRTCUOA04E4WEOPCN8FHZA1+92ZAQB9746VG7TS9%6BZ6B7C97H9IS86N8P:6769L+AI1A.Q6GK427B3GI2%LNOSX0DNYDFB1B6GQNJ. 2YR1:EAVYME9P71TG:OZV1A%QOGSQ2WRARA1LPZ5PBK.ZLMSGKROVQ4WFD1*DEIOBS9X:8V50U50BDWGBS%2`)
var missingSubjectAltNameQR = []byte(``)
var denylistedQR = []byte(`HC1:NCF%RN%TS3DH0RGPJB/IB-OM7533SR99H9M9*VIHWFA K:SCWH3HXK6UO2Y9SA3/-2E%5G%5TW5A 6+O6XL69/9-3AKI67ZMLEQZ76QW6.V99Q9E$BDZIC9J-XIJZIC0J$PIR$SBZI92K-+T38K:ZJ83BV.T8DUFAB4DNAHLW 70SO:GOLIROGOAQ53+LDYPWGO+9A4EOHCR:36UA73NPZ.4IWM%J81:6G16IFNPCL694F$9DK4LC6DQ4394HW6.Y5K45$84-/5$B4D64OBL395$W15ORL355*K7 O%PQX76LZ6B69X5QG5AFY1OSM3-E5ZM3765WU2IMMQUKPHP-E4/H8$1YCV$QECTUKK60VEQA6E+6UCE.UUMYJ3EVFDU9VU1$D.K9H5CKMQ53K$SC4EHXDE5SBCU7RVKG9LJJDX1V4-T2DD5*J/ZCAUHZDR6UT%1WJBN0-8URPSSNIJE7UH5%5000U50/EW%E2U0`)
var incorrectIssuerQR = []byte(``)

var defaultDetails = &VerificationDetails{"1", "1", "XX", "A", "D", "15", "01"}
var frenchVerificationDetails = &VerificationDetails{"1", "0", "FR", "J", "A", "04", "08"}

var wholeNumberFloatDoseQR = []byte(``)
var fractionalFloatDoseQR = []byte(``)

var qrTestcases = []*qrTestcase{
	{defaultQR, VERIFICATION_SUCCESS, defaultDetails, true, "LL"},
	{defaultQR[:50], VERIFICATION_FAILED_ERROR, nil, false, ""},
	{defaultQR[6:], VERIFICATION_FAILED_UNRECOGNIZED_PREFIX, nil, false, ""},
	{nlQR, VERIFICATION_FAILED_IS_NL_DCC, nil, true, ""},

	// Special case of a missing prefix because of a T-Systems app problem
	{defaultQR[4:], VERIFICATION_SUCCESS, defaultDetails, false, "LL"},

	// Special case of float values that should be ints (Ireland)
	{wholeNumberFloatDoseQR, VERIFICATION_SUCCESS, defaultDetails, true, "IE"},
	{fractionalFloatDoseQR, VERIFICATION_FAILED_ERROR, defaultDetails, false, ""},

	// QRs signed with a kid (in testdata) that either has the CUW subject alternative name, or a missing one
	{cuwSubjectAltNameQR, VERIFICATION_SUCCESS, defaultDetails, true, "CW"},
	{missingSubjectAltNameQR, VERIFICATION_FAILED_IS_NL_DCC, nil, true, ""},

	// QR which has been denylisted in the (testdata) config
	{denylistedQR, VERIFICATION_FAILED_ERROR, nil, true, ""},

	// QR with "CNAM" as issuer, which should be corrected to "FR" based on the configured verification rules
	{incorrectIssuerQR, VERIFICATION_SUCCESS, frenchVerificationDetails, true, "FR"},
}
